{"name": "setproperty", "notes": null, "warnings": null, "versions": null, "tips": null, "outdated": null, "lowercase": null, "description": "Add a new property or change an existing property.", "params_title": "(id=0, const name[]=\"\", value=cellmin, const string[]=\"\")", "params_body": [{"name": "id", "description": "The virtual machine to use, you should keep this zero."}, {"name": "name[]", "description": "Used in combination with value when storing integers; don't use this if you want to store a string."}, {"name": "value", "description": "The integer value to store or the property's unique ID if storing a string. Use the hash-function to calculate it from a string."}, {"name": "string[]", "description": "The value of the property, as a string. Don't use this if you want to store an integer."}], "return_values": ["This function does not return any specific values."], "pawn_code": ["setproperty(.name = \"MyInteger\", .value = 42);\n\u00a0\nnew value = getproperty(.name = \"MyInteger\");\nprintf(\"Value that was stored is: %d\", value);", "setproperty(0, \"\", 123984334, \":)\");\n\u00a0\nnew value[4];\ngetproperty(0, \"\", 123984334, value);\nstrunpack(value, value, sizeof(value)); // we need to unpack the string first\nprint(value);\n\u00a0\n//should print\u00a0:)", "setproperty(.value = 123984334, .string = \":)\");\n\u00a0\n// The rest is the same as above."], "code": [], "related_fn": [" Getproperty: Get the value of a property.\n", " Deleteproperty: Delete a property.\n", " Existproperty: Check if a property exists.\n"], "related_cb": []}
{"name": "db_query", "tags": [], "notes": null, "warnings": "Always free the result by using db_free_result!", "versions": null, "tips": null, "outdated": null, "lowercase": null, "description": "This function is used to execute an SQL query on an opened SQLite database.", "params_title": "(DB:db, query[])", "params_body": [{"name": "DB:db", "description": "The database handle to query."}, {"name": "query[]", "description": "The query to execute."}], "return_values": "The query result index (starting at 1).", "pawn_code": ["new DB:db_handle;\n// ...\npublic OnGameModeInit()\n{\n\t// Create a connection to the database\n\tif((db_handle = db_open(\"example.db\")) == DB:0)\n\t{\n\t\t// Error\n\t\tprint(\"Failed to open a connection to \\\"example.db\\\".\");\n\t\tSendRconCommand(\"exit\");\n\t}\n\telse\n\t{\n\t\t// Success\n\t\t// Creates a \"player spawn log\" table, if it doesn't exists, and frees the result\n\t\tdb_free_result(db_query(db_handle, \"CREATE TABLE IF NOT EXISTS `spawn_log`(`ID` INTEGER PRIMARY KEY AUTOINCREMENT,`PlayerID` INTEGER NOT NULL,`PlayerName` VARCHAR(24) NOT NULL)\"));\n\t\tprint(\"Successfully created a connection to \\\"example.db\\\".\");\n\t}\n\t// ...\n\treturn 1;\n}\n\u00a0\npublic OnGameModeExit()\n{\n\t// If there is a database connection, close it\n\tif(db_handle) db_close(db_handle);\n\t// ...\n\treturn 1;\n}\n\u00a0\npublic OnPlayerSpawn(playerid)\n{\n\t// Declare \"query\" and \"p_name\"\n\tstatic query[98], p_name[MAX_PLAYER_NAME+1];\n\u00a0\n\t// Stores the name of the player to \"p_name\"\n\tGetPlayerName(playerid, p_name, sizeof p_name);\n\u00a0\n\t// Formats \"query\"\n\tformat(query, sizeof query, \"INSERT INTO `spawn_log` (`PlayerID`,`PlayerName`) VALUES (%d,'%s')\", playerid, p_name);\n\u00a0\n\t// Inserts something into \"spawn_log\" and frees the result\n\tdb_free_result(db_query(db_handle, query));\n\t// ...\n\treturn 1;\n}\n\u00a0\n// Example function\nGetNameBySpawnID(spawn_id)\n{\n\t// Declare \"p_name\"\n\tnew p_name[MAX_PLAYER_NAME+1];\n\u00a0\n\t// Declare \"query\" and \"db_result\"\n\tstatic query[60], DBResult:db_result;\n\u00a0\n\t// Formats \"query\"\n\tformat(query, sizeof query, \"SELECT `PlayerName` FROM `spawn_log` WHERE `ID`=%d\", spawn_id);\n\u00a0\n\t// Selects the player name by using \"spawn_id\"\n\tdb_result = db_query(db_handle, query);\n\u00a0\n\t// If there is any valid entry\n\tif(db_num_rows(db_result))\n\t{\n\t\t// Store data from \"PlayerName\" into \"p_name\"\n\t\tdb_get_field(db_result, 0, p_name, sizeof p_name);\n\t}\n\u00a0\n\t// Frees the result\n\tdb_free_result(db_result);\n\u00a0\n\t// Returns \"p_name\"\n\treturn p_name;\n}"], "code": [], "related_fn": [" db_open: Open a connection to an SQLite database\n", " db_close: Close the connection to an SQLite database\n", " db_query: Query an SQLite database\n", " db_free_result: Free result memory from a db_query\n", " db_num_rows: Get the number of rows in a result\n", " db_next_row: Move to the next row\n", " db_num_fields: Get the number of fields in a result\n", " db_field_name: Returns the name of a field at a particular index\n", " db_get_field: Get content of field with specified ID from current result row\n", " db_get_field_assoc: Get content of field with specified name from current result row\n", " db_get_field_int: Get content of field as an integer with specified ID from current result row\n", " db_get_field_assoc_int: Get content of field as an integer with specified name from current result row\n", " db_get_field_float: Get content of field as a float with specified ID from current result row\n", " db_get_field_assoc_float: Get content of field as a float with specified name from current result row\n", " db_get_mem_handle: Get memory handle for an SQLite database that was opened with db_open.\n", " db_get_result_mem_handle: Get memory handle for an SQLite query that was executed with db_query.\n", " db_debug_openfiles\n", " db_debug_openresults\n"], "related_cb": []}
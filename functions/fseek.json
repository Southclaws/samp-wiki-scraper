{"name": "fseek", "notes": null, "warnings": "Using an invalid handle will crash your server! Get a valid handle by using fopen or ftemp.", "versions": null, "tips": null, "outdated": null, "lowercase": null, "description": "Change the current position in the file. You can either seek forward or backward through the file.", "params_title": "(File:handle, position, whence)", "params_body": [{"name": "handle", "description": "The file handle to use. Returned by fopen."}, {"name": "position", "description": "The new position in the file, relative to the parameter whence (see below)."}, {"name": "whence", "description": "The starting position to which parameter position relates."}, {"name": "seek_start", "description": "Set the file position relative to the start of the file (the position parameter must be positive)."}, {"name": "seek_current", "description": "Set the file position relative to the current file position: the position parameter is added to the current position."}, {"name": "seek_end", "description": "Set the file position relative to the end of the file (parameter position must be zero or negative)."}], "return_values": "The new position; relative to the start of the file.", "pawn_code": ["// Open \"file.txt\" in \"read only\" mode\nnew File:handle = fopen(\"file.txt\", io_read);\n\u00a0\n// If \"file.txt\" is open\nif(handle)\n{\n\t// Success\n\u00a0\n\t// Jump to the 1st byte of \"file.txt\", and print its position\n\tprintf(\"Begin of file position: %d\", fseek(handle, 0, seek_start));\n\u00a0\n\t// Jump to the last byte of \"file.txt\", and print its position\n\tprintf(\"End of file position: %d\", fseek(handle, 0, seek_end));\n\u00a0\n\t// Jump to the same byte of \"file.txt\", and print its position\n\tprintf(\"Currrent file position: %d\", fseek(handle, 0, seek_current));\n\u00a0\n\t// Close \"file.txt\"\n\tfclose(handle);\n}\nelse\n{\n\t// Error\n\tprint(\"Failed to open \\\"file.txt\\\".\");\n}"], "code": [], "related_fn": [" fopen: Open a file.\n", " fclose: Close a file.\n", " ftemp: Create a temporary file stream.\n", " fremove: Remove a file.\n", " fwrite: Write to a file.\n", " fread: Read a file.\n", " fputchar: Put a character in a file.\n", " fgetchar: Get a character from a file.\n", " fblockwrite: Write blocks of data into a file.\n", " fblockread: Read blocks of data from a file.\n", " fseek: Jump to a specific character in a file.\n", " flength: Get the file length.\n", " fexist: Check, if a file exists.\n", " fmatch: Check, if patterns with a file name matches.\n"], "related_cb": []}
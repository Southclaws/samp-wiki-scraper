{"name": "fgetchar", "tags": [], "notes": null, "warnings": "Using an invalid handle will crash your server! Get a valid handle by using fopen or ftemp.", "versions": null, "tips": null, "outdated": null, "lowercase": null, "description": "Reads a single character from a file.", "params_title": "(File: handle, value, bool: utf8=true)", "params_body": [{"name": "handle", "description": "The file handle to use; returned by fopen."}, {"name": "value", "description": "This parameter has no use, just keep it \"0\"."}, {"name": "utf8", "description": "If true, read a character as UTF-8, otherwise as extended ASCII."}], "return_values": "If succeed, it returns the extended ASCII or UTF-8 value of the character at the current position in the file, otherwise EOF (end of file).", "pawn_code": ["// Open \"file.txt\" in \"read only\" mode\nnew File:handle = fopen(\"file.txt\", io_read),\n\u00a0\n\t// Declare \"g_char\"\n\tg_char;\n\u00a0\n// Check, if \"file.txt\" is open\nif(handle)\n{\n\t// Read all characters, while ignoring UTF-8.\n\twhile((g_char = fgetchar(handle, 0, false))\u00a0!= EOF)\n\t{\n\t\t// Print the character\n\t\tprintf(\"[ \\\"file.txt\\\" ] 0x%x\", g_char);\n\t}\n\u00a0\n\t// Close \"file.txt\"\n\tfclose(handle);\n}\nelse\n{\n\t// Error\n\tprint(\"Failed to open \\\"file.txt\\\".\");\n}"], "code": [], "related_fn": [" fopen: Open a file.\n", " fclose: Close a file.\n", " ftemp: Create a temporary file stream.\n", " fremove: Remove a file.\n", " fwrite: Write to a file.\n", " fread: Read a file.\n", " fputchar: Put a character in a file.\n", " fgetchar: Get a character from a file.\n", " fblockwrite: Write blocks of data into a file.\n", " fblockread: Read blocks of data from a file.\n", " fseek: Jump to a specific character in a file.\n", " flength: Get the file length.\n", " fexist: Check, if a file exists.\n", " fmatch: Check, if patterns with a file name matches.\n"], "related_cb": []}
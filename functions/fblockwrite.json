{"name": "fblockwrite", "notes": null, "warnings": "Using an invalid handle will crash your server! Get a valid handle by using fopen or ftemp.", "versions": null, "tips": null, "outdated": null, "lowercase": null, "description": "Write data to a file in binary format, while ignoring line brakes and encoding.", "params_title": "(handle, const buffer[], size = sizeof buffer)", "params_body": [{"name": "handle", "description": "The File handle to use, opened by fopen()."}, {"name": "const buffer[]", "description": "The data to write to the file."}, {"name": "size = sizeof buffer", "description": "The number of cells to write."}], "return_values": "This function does not return any specific values.", "pawn_code": ["// Define \"some_enum\"\nenum _:some_enum\n{\n\tsome_data1,\n\tsome_data2[20],\n\tFloat:some_data3\n}\n\u00a0\n// Declare \"some_data\"\nnew some_data[some_enum];\n\u00a0\n// ...\n\u00a0\n// Open \"file.bin\" in \"write only\" mode\nnew File:handle = fopen(\"file.bin\", io_write);\n\u00a0\n// Check, if \"file.bin\" is open\nif(handle)\n{\n\t// Success\n\u00a0\n\t// Write \"some_data\" into \"file.bin\"\n\tfblockwrite(handle, some_data);\n\u00a0\n\t// Close \"file.bin\"\n\tfclose(handle);\n}\nelse\n{\n\t// Error\n\tprint(\"Failed to open \\\"file.bin\\\".\");\n}"], "code": [], "related_fn": [" fopen: Open a file.\n", " fclose: Close a file.\n", " ftemp: Create a temporary file stream.\n", " fremove: Remove a file.\n", " fwrite: Write to a file.\n", " fread: Read a file.\n", " fputchar: Put a character in a file.\n", " fgetchar: Get a character from a file.\n", " fblockwrite: Write blocks of data into a file.\n", " fblockread: Read blocks of data from a file.\n", " fseek: Jump to a specific character in a file.\n", " flength: Get the file length.\n", " fexist: Check, if a file exists.\n", " fmatch: Check, if patterns with a file name matches.\n"], "related_cb": []}
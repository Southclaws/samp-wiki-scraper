{"name": "SetTimerEx", "notes": "\n Timer ID variables should be initialized to -1 when they can to minimise the chance of accidentally killing timer ID 0 by mistake (or use timer ID 0 up at the start of OnGameModeInit).\n Timer intervals are not accurate (roughly 25% off). There are fixes available here and here.\n The function to be called must be public. That means it has to be forwarded.\n\n", "warnings": null, "versions": null, "tips": null, "outdated": null, "lowercase": null, "description": "Sets a timer to call a function after the specified interval. This variant ('Ex') can pass parameters (such as a player ID) to the function.", "params_title": "(funcname[], interval, repeating, const format[], {Float,_}:...)", "params_body": [{"name": "funcname[]", "description": "The name of a public function to call when the timer expires."}, {"name": "interval", "description": "Interval in milliseconds (1 second = 1000 MS)."}, {"name": "repeating", "description": "Boolean (true/false (or 1/0)) that states whether the timer should be called repeatedly (can only be stopped with KillTimer) or only once."}, {"name": "format[]", "description": "Special format indicating the types of values the timer will pass."}, {"name": "{Float,_}:...", "description": "Indefinite number of arguments to pass (must follow format specified in previous parameter)."}], "return_values": ["The ID of the timer that was started. Timer IDs start at 1 and are never reused. There are no internal checks to verify that the parameters passed are valid (e.g. duration not a minus value).  Y_Less' 'fixes2' plugin implements these checks and also vastly improves the accuracy of timers, and also adds support for array/string passing."], "pawn_code": ["SetTimerEx(\"EndAntiSpawnKill\", 5000, false, \"i\", playerid);\n// EndAntiSpawnKill - The function that will be called\n// 5000 - 5000 MS (5 seconds). This is the interval. The timer will be called after 5 seconds.\n// false - Not repeating. Will only be called once.\n// \"i\" - I stands for integer (whole number). We are passing an integer (a player ID) to the function.\n// playerid - The value to pass. This is the integer specified in the previous parameter.", "// The event callback (OnPlayerSpawn) - we will start a timer here\npublic OnPlayerSpawn(playerid)\n{\n    // Anti-Spawnkill (5 seconds)\n\u00a0\n    // Set their health very high so they can't be killed\n    SetPlayerHealth(playerid, 999999);\n\u00a0\n    // Notify them\n    SendClientMessage(playerid, -1, \"You are protected against spawn-killing for 5 seconds.\");\n\u00a0\n    // Start a 5 second timer to end the anti-spawnkill\n    SetTimerEx(\"EndAntiSpawnKill\", 5000, false, \"i\", playerid);\n}\n\u00a0\n// Forward (make public) the function so the server can 'see' it\nforward EndAntiSpawnKill(playerid);\n\u00a0\n// The timer function - the code to be executed when the timer is called goes here\npublic EndAntiSpawnKill(playerid)\n{\n    // 5 seconds has passed, so let's set their health back to 100\n    SetPlayerHealth(playerid, 100);\n\u00a0\n    // Let's notify them also\n    SendClientMessage(playerid, -1, \"You are no longer protected against spawn-killing.\");\n    return 1;\n}"], "code": [], "related_fn": [" SetTimer: Set a timer.\n", " KillTimer: Stop a timer.\n", " CallLocalFunction: Call a function in the script.\n", " CallRemoteFunction: Call a function in any loaded script.\n"], "related_cb": []}
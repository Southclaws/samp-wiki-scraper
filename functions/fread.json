{"name": "fread", "tags": [], "notes": null, "warnings": "Using an invalid handle will crash your server! Get a valid handle by using fopen or ftemp.", "versions": null, "tips": null, "outdated": null, "lowercase": null, "description": "Read a single line from a file.", "params_title": "(File:handle, string[], size = sizeof string, bool: pack = false)", "params_body": [{"name": "handle", "description": "The handle of the file to read from (returned by fopen)."}, {"name": "string", "description": "A string array to store the read text in, passed by reference."}, {"name": "size", "description": "The number of bytes to read."}, {"name": "pack", "description": "Should the string be packed? True/false."}], "return_values": "The length of string (the read text) as an integer.", "pawn_code": ["// Open \"file.txt\" in \"read only\" mode\nnew File:handle = fopen(\"file.txt\", io_read),\n\u00a0\n\t// Initialize \"buf\"\n\tbuf[128];\n\u00a0\n// Check, if the file is opened\nif(handle)\n{\n\t// Success\n\u00a0\n\t// Read the whole file\n\twhile(fread(handle, buf)) print(buf);\n\u00a0\n\t// Close the file\n\tfclose(handle);\n}\nelse\n{\n\t// Error\n\tprint(\"The file \\\"file.txt\\\" does not exists, or can't be opened.\");\n}", "// Open \"file.txt\" in \"read and write\" mode\nnew File:handle = fopen(\"file.txt\"),\n\u00a0\n\t// Initialize \"buf\"\n\tbuf[128];\n\u00a0\n// Check, if file is open\nif(handle)\n{\n\t// Success\n\u00a0\n\t// Read the whole file\n\twhile(fread(handle, buf)) print(buf);\n\u00a0\n\t// Set the file pointer to the first byte\n\tfseek(handle, _, seek_begin);\n\u00a0\n\t// Write \"I just wrote here!\" into this file\n\tfwrite(handle, \"I just wrote here!\");\n\u00a0\n\t// Close the file\n\tfclose(handle);\n}\nelse\n{\n\t// Error\n\tprint(\"The file \\\"file.txt\\\" does not exists, or can't be opened.\");\n}"], "code": [], "related_fn": [" fopen: Open a file.\n", " fclose: Close a file.\n", " ftemp: Create a temporary file stream.\n", " fremove: Remove a file.\n", " fwrite: Write to a file.\n", " fread: Read a file.\n", " fputchar: Put a character in a file.\n", " fgetchar: Get a character from a file.\n", " fblockwrite: Write blocks of data into a file.\n", " fblockread: Read blocks of data from a file.\n", " fseek: Jump to a specific character in a file.\n", " flength: Get the file length.\n", " fexist: Check, if a file exists.\n", " fmatch: Check, if patterns with a file name matches.\n"], "related_cb": []}
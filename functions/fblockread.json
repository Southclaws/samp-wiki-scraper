{"name": "fblockread", "notes": null, "warnings": "Using an invalid handle will crash your server! Get a valid handle by using fopen or ftemp.", "versions": null, "tips": null, "outdated": null, "lowercase": null, "description": "This function allows you to read data from a file, without encoding and line terminators", "params_title": "(File:handle, buffer[], size = sizeof buffer)", "params_body": [{"name": "handle", "description": "File handle to use, opened by fopen()"}, {"name": "buffer", "description": "The buffer to save the read data in."}, {"name": "size = sizeof buffer", "description": "The number of cells to read."}], "return_values": ["The number of cells read. Zero, if the file end has been reached."], "pawn_code": ["// Define \"some_enum\"\nenum _:some_enum\n{\n\tsome_data1,\n\tsome_data2[20],\n\tFloat:some_data3\n}\n\u00a0\n// Declare \"some_data\"\nnew some_data[some_enum];\n\u00a0\n// ...\n\u00a0\n// Open \"file.bin\" in \"read only\" mode\nnew File:handle = fopen(\"file.bin\", io_write)\n\u00a0\n\t// Declare \"file_len\"\n\tfile_len;\n\u00a0\n// Check, if \"file.bin\" is open\nif(handle)\n{\n\t// Success\n\u00a0\n\t// Get the file length of \"file.bin\"\n\tfile_len = flength(handle);\n\u00a0\n\t// If file is equally large than the array\n\tif(file_len == (some_enum*4))\n\t{\n\t\t// Success\n\u00a0\n\t\t// Read from \"file.bin\" into \"some_data\"\n\t\tfblockread(handle, some_data);\n\t}\n\telse\n\t{\n\t\t// Error\n\t\tprint(\"\\\"file.bin\\\" is not compatible with the array.\");\n\t}\n\u00a0\n\t// Close \"file.bin\"\n\tfclose(handle);\n}\nelse\n{\n\t// Error\n\tprint(\"Failed to open \\\"file.bin\\\".\");\n}"], "code": [], "related_fn": [], "related_cb": []}
{"name": "OnPlayerKeyStateChange", "tags": ["player"], "kind": "callbacks", "notes": "This callback can also be called by NPC.", "warnings": null, "versions": null, "tips": "Directional keys do not trigger OnPlayerKeyStateChange (up/down/left/right). They can only be detected with GetPlayerKeys (in OnPlayerUpdate or a timer).", "outdated": null, "lowercase": null, "description": "This callback is called when the state of any supported key is changed (pressed/released). Directional keys do not trigger OnPlayerKeyStateChange (up/down/left/right).", "params_title": "(playerid, newkeys, oldkeys)", "params_body": [{"name": "playerid", "description": "The ID of the player that pressed or released a key."}, {"name": "newkeys", "description": "A map (bitmask) of the keys currently held - see here."}, {"name": "oldkeys", "description": "A map (bitmask) of the keys held prior to the current change - see here."}], "return_values": " It is always called first in gamemode.", "pawn_code": ["if (newkeys == KEY_FIRE)", "if (newkeys & KEY_FIRE)", "if ((newkeys & KEY_FIRE) &&\u00a0!(oldkeys & KEY_FIRE))", "if ((oldkeys & KEY_FIRE) &&\u00a0!(newkeys & KEY_FIRE))", "if ((newkeys & KEY_FIRE) && (newkeys & KEY_CROUCH))", "if ((newkeys & KEY_FIRE) &&\u00a0!(oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) &&\u00a0!(oldkeys & KEY_CROUCH))", "if ((newkeys & (KEY_FIRE | KEY_CROUCH)) == (KEY_FIRE | KEY_CROUCH) && (oldkeys & (KEY_FIRE | KEY_CROUCH))\u00a0!= (KEY_FIRE | KEY_CROUCH))", "// HOLDING(keys)\n#define HOLDING(%0) \\\n\t((newkeys & (%0)) == (%0))", "if (HOLDING( KEY_FIRE ))", "if (HOLDING( KEY_FIRE | KEY_CROUCH ))", "// PRESSED(keys)\n#define PRESSED(%0) \\\n\t(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0))\u00a0!= (%0)))", "if (PRESSED( KEY_FIRE ))", "if (PRESSED( KEY_FIRE | KEY_CROUCH ))", "// PRESSING(keyVariable, keys)\n#define PRESSING(%0,%1) \\\n\t(%0 & (%1))", "if (PRESSING( newkeys, KEY_FIRE ))", "if (PRESSING( newkeys, KEY_FIRE | KEY_CROUCH ))", "// RELEASED(keys)\n#define RELEASED(%0) \\\n\t(((newkeys & (%0))\u00a0!= (%0)) && ((oldkeys & (%0)) == (%0)))", "if (RELEASED( KEY_FIRE ))", "if (RELEASED( KEY_FIRE | KEY_CROUCH ))", "public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)\n{\n\tif (PRESSED(KEY_FIRE))\n\t{\n\t\tif (IsPlayerInAnyVehicle(playerid))\n\t\t{\n\t\t\tAddVehicleComponent(GetPlayerVehicleID(playerid), 1010);\n\t\t}\n\t}\n\treturn 1;\n}", "public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)\n{\n\tif (PRESSED(KEY_JUMP))\n\t{\n\t\tnew\n\t\t\tFloat:x,\n\t\t\tFloat:y,\n\t\t\tFloat:z;\n\t\tGetPlayerPos(playerid, x, y, z);\n\t\tSetPlayerPos(playerid, x, y, z + 10.0);\n\t}\n\treturn 1;\n}", "new\n\tFloat:gPlayerHealth[MAX_PLAYERS];\n\u00a0\n#if\u00a0!defined INFINITY\n\t#define INFINITY (Float:0x7F800000)\n#endif\n\u00a0\npublic OnPlayerKeyStateChange(playerid, newkeys, oldkeys)\n{\n\tif (PRESSED(KEY_ACTION))\n\t{\n\t\t// They just pressed the action key, save their\n\t\t// old health for restoration.\n\t\tGetPlayerHealth(playerid, gPlayerHealth[playerid]);\n\t\tSetPlayerHealth(playerid, INFINITY);\n\t}\n\telse if (RELEASED(KEY_ACTION))\n\t{\n\t\t// They just let go of action - restore\n\t\t// their old health again.\n\t\tSetPlayerHealth(playerid, gPlayerHealth[playerid]);\n\t}\n\treturn 1;\n}"], "code": ["0b00001000\n", "0b00100000\n", "0b00101000\n", "newkeys = 0b00100000\nwanted  = 0b00101000\nANDed   = 0b00100000\n", "newkeys = 0b00101010\nwanted  = 0b00101000\nANDed   = 0b00101000\n", "newkeys = 0b00100000\nwanted  = 0b00101000\nANDed   = 0b00100000\n", "newkeys = 0b00101010\nwanted  = 0b00101000\nANDed   = 0b00101000\n"], "related_fn": [" GetPlayerKeys: Check what keys a player is holding.\n"], "related_cb": []}
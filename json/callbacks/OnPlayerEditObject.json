{"name": "OnPlayerEditObject", "tags": ["player"], "kind": "callbacks", "notes": null, "warnings": "When using 'EDIT_RESPONSE_UPDATE' be aware that this callback will not be called when releasing an edit in progress resulting in the last update of 'EDIT_RESPONSE_UPDATE' being out of sync of the objects current position.", "versions": "This callback was added in SA-MP 0.3e and will not work in earlier versions!", "tips": null, "outdated": null, "lowercase": null, "description": "This callback is called when a player finishes editing an object (EditObject/EditPlayerObject).", "params_title": "(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)", "params_body": [{"name": "playerid", "description": "The ID of the player that edited an object"}, {"name": "playerobject", "description": "0 if it is a global object or 1 if it is a playerobject."}, {"name": "objectid", "description": "The ID of the edited object"}, {"name": "response", "description": "The type of response"}, {"name": "Float:fX", "description": "The X offset for the object that was edited"}, {"name": "Float:fY", "description": "The Y offset for the object that was edited"}, {"name": "Float:fZ", "description": "The Z offset for the object that was edited"}, {"name": "Float:fRotX", "description": "The X rotation for the object that was edited"}, {"name": "Float:fRotY", "description": "The Y rotation for the object that was edited"}, {"name": "Float:fRotZ", "description": "The Z rotation for the object that was edited"}], "return_values": " 1 - Will prevent other scripts from receiving this callback.\n\n 0 - Indicates that this callback will be passed to the next script.\n\n It is always called first in filterscripts.", "pawn_code": ["public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)\n{\n\tnew Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;\n\tGetObjectPos(objectid, oldX, oldY, oldZ);\n\tGetObjectRot(objectid, oldRotX, oldRotY, oldRotZ);\n\tif(!playerobject) // If this is a global object, sync the position for other players\n\t{\n\t    if(!IsValidObject(objectid)) return 1;\n\t    SetObjectPos(objectid, fX, fY, fZ);\t\t          \n\t    SetObjectRot(objectid, fRotX, fRotY, fRotZ);\n\t}\n\u00a0\n\tif(response == EDIT_RESPONSE_FINAL)\n\t{\n\t\t// The player clicked on the save icon\n\t\t// Do anything here to save the updated object position (and rotation)\n\t}\n\u00a0\n\tif(response == EDIT_RESPONSE_CANCEL)\n\t{\n\t\t//The player cancelled, so put the object back to it's old position\n\t\tif(!playerobject) //Object is not a playerobject\n\t\t{\n\t\t\tSetObjectPos(objectid, oldX, oldY, oldZ);\n\t\t\tSetObjectRot(objectid, oldRotX, oldRotY, oldRotZ);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSetPlayerObjectPos(playerid, objectid, oldX, oldY, oldZ);\n\t\t\tSetPlayerObjectRot(playerid, objectid, oldRotX, oldRotY, oldRotZ);\n\t\t}\n\t}\n\treturn 1;\n}"], "code": [], "related_fn": [" EditObject: Edit an object.\n", " CreateObject: Create an object.\n", " DestroyObject: Destroy an object.\n", " MoveObject: Move an object.\n"], "related_cb": []}
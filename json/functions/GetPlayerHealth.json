{"name": "GetPlayerHealth", "tags": ["player"], "kind": "functions", "notes": null, "warnings": "\nEven though the health can be set to near infinite values on the server side, the individual clients will only report values up to 255. Anything higher will wrap around; 256 becomes 0, 257 becomes 1, etc.\nHealth is obtained rounded to integers: set 50.15, but get 50.0\n\n", "versions": null, "tips": null, "outdated": null, "lowercase": null, "description": "The function GetPlayerHealth allows you to retrieve the health of a player. Useful for cheat detection, among other things.", "params_title": "(playerid, &Float:health)", "params_body": [{"name": "playerid", "description": "The ID of the player."}, {"name": "&Float:health", "description": "Float to store health, passed by reference."}], "return_values": " 1 - success\n\n 0 - failure (i.e. player not connected).\n\n The player's health is stored in the specified variable.", "pawn_code": ["// Sets players health to 50 if it was lower than\n// 50 before, as soon as he typed /doctor\n\u00a0\nif(strcmp(cmdtext, \"/doctor\", true) == 0)\n{\n    new Float:health;\n    GetPlayerHealth(playerid,health);\n    if (health < 50.0)\n    {\n        SetPlayerHealth(playerid, 50.0);\n    }\n    return 1;\n}"], "code": [], "related_fn": [" SetPlayerHealth: Set a player's health.\n", " GetVehicleHealth: Check the health of a vehicle.\n", " GetPlayerArmour: Find out how much armour a player has.\n"], "related_cb": []}